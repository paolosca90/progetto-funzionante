name: Dependency Management

on:
  schedule:
    - cron: '0 3 * * 1'  # Weekly on Monday at 3 AM
  push:
    branches: [ main ]
    paths:
      - 'requirements.txt'
      - 'frontend/requirements*.txt'
  pull_request:
    branches: [ main ]
    paths:
      - 'requirements.txt'
      - 'frontend/requirements*.txt'
  workflow_dispatch:

jobs:
  # Dependency Security Analysis
  dependency-security:
    name: Dependency Security Analysis
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependency analysis tools
      run: |
        python -m pip install --upgrade pip
        pip install pip-audit safety pip-licenses cyclonedx-python

    - name: Run pip-audit for vulnerability scanning
      run: |
        pip-audit --requirement requirements.txt --format json --output pip-audit-main.json || true
        pip-audit --requirement frontend/requirements.txt --format json --output pip-audit-frontend.json || true
        pip-audit --requirement frontend/requirements-test.txt --format json --output pip-audit-test.json || true

    - name: Run safety for security checking
      run: |
        safety check --file requirements.txt --json --output safety-main.json || true
        safety check --file frontend/requirements.txt --json --output safety-frontend.json || true
        safety check --file frontend/requirements-test.txt --json --output safety-test.json || true

    - name: Generate SBOM (Software Bill of Materials)
      run: |
        cyclonedx-py --requirements requirements.txt --format json --output sbom-main.json
        cyclonedx-py --requirements frontend/requirements.txt --format json --output sbom-frontend.json
        cyclonedx-py --requirements frontend/requirements-test.txt --format json --output sbom-test.json

    - name: Check for outdated dependencies
      run: |
        pip list --outdated --format=json > outdated-dependencies.json || true

    - name: Analyze license compliance
      run: |
        pip-licenses --format=json --output licenses-main.json
        pip-licenses --requirements frontend/requirements.txt --format=json --output licenses-frontend.json
        pip-licenses --requirements frontend/requirements-test.txt --format=json --output licenses-test.json

    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: dependency-security-reports
        path: |
          pip-audit-*.json
          safety-*.json
          sbom-*.json
          outdated-dependencies.json
          licenses-*.json

  # Dependency Update Automation
  dependency-updates:
    name: Dependency Updates
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install pip-tools
      run: |
        python -m pip install --upgrade pip
        pip install pip-tools

    - name: Update main requirements
      run: |
        pip-compile --upgrade requirements.in > requirements.txt || true

    - name: Update frontend requirements
      run: |
        cd frontend
        pip-compile --upgrade requirements.in > requirements.txt || true
        pip-compile --upgrade requirements-test.in > requirements-test.txt || true

    - name: Check for changes
      id: check-changes
      run: |
        if git diff --quiet; then
          echo "changes=false" >> $GITHUB_OUTPUT
        else
          echo "changes=true" >> $GITHUB_OUTPUT
        fi

    - name: Create Pull Request for dependency updates
      if: steps.check-changes.outputs.changes == 'true'
      uses: peter-evans/create-pull-request@v5
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        commit-message: 'chore: Update dependencies'
        title: 'Dependency Updates'
        body: |
          ## Dependency Updates

          This PR contains automated dependency updates to keep the project dependencies current and secure.

          ### Changes
          - Updated Python dependencies to latest versions
          - Includes security patches and bug fixes
          - May include new features and improvements

          ### Next Steps
          - Review the changes in the files below
          - Run the CI pipeline to ensure compatibility
          - Merge if all tests pass

          ### Files Changed
          - `requirements.txt`
          - `frontend/requirements.txt`
          - `frontend/requirements-test.txt`

          ### Security
          These updates may include important security patches. Please prioritize merging if there are any security updates.
        branch: 'dependabot/dependency-updates'
        delete-branch: true

  # Dependency Compatibility Testing
  compatibility-testing:
    name: Dependency Compatibility Testing
    runs-on: ubuntu-latest
    needs: dependency-security

    strategy:
      matrix:
        python-version: ['3.10', '3.11']

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r frontend/requirements.txt
        pip install -r frontend/requirements-test.txt

    - name: Test basic functionality
      run: |
        python -c "import fastapi, uvicorn, sqlalchemy, psycopg2, redis, pandas, numpy"
        python -c "print('✅ All main dependencies imported successfully')"

    - name: Test FastAPI application startup
      run: |
        cd frontend
        python -c "
        import sys
        import os
        sys.path.insert(0, '.')

        # Test if main app can be imported
        try:
            from main import app
            print('✅ FastAPI app imported successfully')
        except Exception as e:
            print(f'❌ Failed to import FastAPI app: {e}')
            sys.exit(1)
        "

    - name: Test database connectivity
      run: |
        python -c "
        import os
        import psycopg2

        # Test with a simple connection string
        try:
            conn = psycopg2.connect('postgresql://postgres:postgres@localhost:5432/test_db')
            conn.close()
            print('✅ PostgreSQL connectivity test passed')
        except:
            print('⚠️  PostgreSQL not available for testing (expected in CI)')
        "

    - name: Test Redis connectivity
      run: |
        python -c "
        import redis

        try:
            r = redis.Redis(host='localhost', port=6379, db=0)
            r.ping()
            print('✅ Redis connectivity test passed')
        except:
            print('⚠️  Redis not available for testing (expected in CI)')
        "

    - name: Run basic test suite
      run: |
        cd frontend
        python -m pytest tests/ -m "unit" --tb=short -v || echo "⚠️  Some tests failed (dependency compatibility issue)"

    - name: Upload compatibility results
      uses: actions/upload-artifact@v3
      with:
        name: compatibility-results-${{ matrix.python-version }}
        path: |
          compatibility-test-*.log

  # License Compliance Check
  license-compliance:
    name: License Compliance Check
    runs-on: ubuntu-latest
    needs: dependency-security

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install license analysis tools
      run: |
        python -m pip install --upgrade pip
        pip install pip-licenses

    - name: Generate license reports
      run: |
        pip-licenses --format=html --output licenses-main.html
        pip-licenses --requirements frontend/requirements.txt --format=html --output licenses-frontend.html
        pip-licenses --requirements frontend/requirements-test.txt --format=html --output licenses-test.html

    - name: Check for problematic licenses
      run: |
        python -c "
        import subprocess
        import json

        # Check for GPL or AGPL licenses
        problematic_licenses = ['GPL', 'AGPL', 'LGPL']

        try:
            result = subprocess.run(['pip-licenses', '--format=json'], capture_output=True, text=True)
            licenses = json.loads(result.stdout)

            problematic_packages = []
            for package in licenses:
                for license_name in problematic_licenses:
                    if license_name in package.get('License', ''):
                        problematic_packages.append({
                            'name': package['Name'],
                            'version': package['Version'],
                            'license': package['License']
                        })

            if problematic_packages:
                print('❌ Found packages with potentially problematic licenses:')
                for pkg in problematic_packages:
                    print(f'  - {pkg[\"name\"]} {pkg[\"version\"]} ({pkg[\"license\"]})')
                print()
                print('These packages may require additional legal review before use in production.')
                print('Please review the license requirements and ensure compliance.')
                exit(1)
            else:
                print('✅ No problematic licenses found')

        except Exception as e:
            print(f'⚠️  License check failed: {e}')
            print('Please manually review the license reports.')
        "

    - name: Upload license reports
      uses: actions/upload-artifact@v3
      with:
        name: license-reports
        path: |
          licenses-*.html

  # Dependency Health Score
  health-score:
    name: Dependency Health Score
    runs-on: ubuntu-latest
    needs: [dependency-security, compatibility-testing, license-compliance]
    if: always()

    steps:
    - name: Download all reports
      uses: actions/download-artifact@v3

    - name: Calculate dependency health score
      run: |
        echo "Calculating dependency health score..."

        # Initialize score
        total_score=100
        score_breakdown=""

        # Check security scan results
        if [ -f "dependency-security-reports/pip-audit-main.json" ]; then
          vulnerabilities=$(jq '. | length' dependency-security-reports/pip-audit-main.json 2>/dev/null || echo "0")
          if [ "$vulnerabilities" -gt 0 ]; then
            score_reduction=$((vulnerabilities * 10))
            total_score=$((total_score - score_reduction))
            score_breakdown+="Security: -$score_reduction ($vulnerabilities vulnerabilities)\\n"
          fi
        fi

        # Check compatibility test results
        if [ "${{ needs.compatibility-testing.result }}" != "success" ]; then
          total_score=$((total_score - 20))
          score_breakdown+="Compatibility: -20 (failed compatibility tests)\\n"
        fi

        # Check license compliance
        if [ "${{ needs.license-compliance.result }}" != "success" ]; then
          total_score=$((total_score - 30))
          score_breakdown+="License: -30 (license compliance issues)\\n"
        fi

        # Check for outdated packages
        if [ -f "dependency-security-reports/outdated-dependencies.json" ]; then
          outdated=$(jq '. | length' dependency-security-reports/outdated-dependencies.json 2>/dev/null || echo "0")
          if [ "$outdated" -gt 5 ]; then
            score_reduction=$(( (outdated - 5) * 2 ))
            total_score=$((total_score - score_reduction))
            score_breakdown+="Updates: -$score_reduction ($outdated outdated packages)\\n"
          fi
        fi

        # Ensure score doesn't go below 0
        if [ $total_score -lt 0 ]; then
          total_score=0
        fi

        echo "DEPENDENCY_HEALTH_SCORE=$total_score" >> $GITHUB_ENV
        echo "SCORE_BREAKDOWN=$score_breakdown" >> $GITHUB_ENV

    - name: Generate health report
      run: |
        echo "# Dependency Health Report" >> dependency-health-report.md
        echo "## Generated: $(date)" >> dependency-health-report.md
        echo "" >> dependency-health-report.md
        echo "### Overall Health Score: ${{ env.DEPENDENCY_HEALTH_SCORE }}/100" >> dependency-health-report.md
        echo "" >> dependency-health-report.md
        echo "### Score Breakdown:" >> dependency-health-report.md
        echo -e "${{ env.SCORE_BREAKDOWN }}" >> dependency-health-report.md
        echo "" >> dependency-health-report.md
        echo "### Security Scan Results: ${{ needs.dependency-security.result }}" >> dependency-health-report.md
        echo "### Compatibility Tests: ${{ needs.compatibility-testing.result }}" >> dependency-health-report.md
        echo "### License Compliance: ${{ needs.license-compliance.result }}" >> dependency-health-report.md
        echo "" >> dependency-health-report.md
        echo "### Recommendations:" >> dependency-health-report.md

        if [ "${{ env.DEPENDENCY_HEALTH_SCORE }}" -lt 70 ]; then
          echo "- 🔴 **ACTION REQUIRED**: Low dependency health score" >> dependency-health-report.md
          echo "- Review and update vulnerable dependencies" >> dependency-health-report.md
          echo "- Address compatibility issues" >> dependency-health-report.md
          echo "- Ensure license compliance" >> dependency-health-report.md
        elif [ "${{ env.DEPENDENCY_HEALTH_SCORE }}" -lt 90 ]; then
          echo "- 🟡 **ATTENTION NEEDED**: Moderate dependency health score" >> dependency-health-report.md
          echo "- Consider updating outdated dependencies" >> dependency-health-report.md
          echo "- Monitor security advisories" >> dependency-health-report.md
        else
          echo "- ✅ **GOOD**: Healthy dependency ecosystem" >> dependency-health-report.md
          echo "- Continue regular maintenance" >> dependency-health-report.md
        fi

    - name: Upload health report
      uses: actions/upload-artifact@v3
      with:
        name: dependency-health-report
        path: dependency-health-report.md

    - name: Comment on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const report = fs.readFileSync('dependency-health-report.md', 'utf8');

          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `## Dependency Health Report\n\n${report}`
          });

    - name: Fail on low health score
      if: env.DEPENDENCY_HEALTH_SCORE < 50
      run: |
        echo "Dependency health score too low: ${{ env.DEPENDENCY_HEALTH_SCORE }}/100"
        echo "Please address the security and compatibility issues before merging."
        exit 1

  # Automated Dependency Updates Notification
  notification:
    name: Updates Notification
    runs-on: ubuntu-latest
    needs: health-score
    if: github.event_name == 'schedule' && needs.health-score.result == 'success'

    steps:
    - name: Download health report
      uses: actions/download-artifact@v3
      with:
        name: dependency-health-report

    - name: Send notification
      run: |
        echo "Sending dependency health notification..."

        # Create notification message
        cat > notification.md << EOF
        ## Weekly Dependency Health Report

        **Health Score**: ${{ env.DEPENDENCY_HEALTH_SCORE }}/100
        **Generated**: $(date)

        ${cat dependency-health-report.md}

        ### Action Items:
        - Review the detailed dependency health report
        - Address any security vulnerabilities
        - Update outdated packages if needed
        - Ensure license compliance

        **Next scheduled check**: Next Monday at 3 AM UTC
        EOF

        # This would typically send to Slack or email
        # For now, we'll create a GitHub issue
        echo "Notification created - see dependency-health-report.md for details"

    - name: Create GitHub issue for low health scores
      if: env.DEPENDENCY_HEALTH_SCORE < 80
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const report = fs.readFileSync('dependency-health-report.md', 'utf8');

          const title = `Dependency Health Score: ${process.env.DEPENDENCY_HEALTH_SCORE}/100 - Action Required`;
          const body = `## Dependency Health Alert\n\n${report}\n\n### Required Actions\n\nPlease address the dependency health issues identified in this report. This includes:\n- Security vulnerabilities\n- Compatibility issues\n- License compliance problems\n- Outdated packages\n\nPriority: **High**\nDue date: Within 1 week`;

          github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: title,
            body: body,
            labels: ['dependencies', 'security', 'maintenance']
          });