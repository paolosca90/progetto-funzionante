# Docker Performance Configuration for Trading System
# This file contains performance optimization settings for Docker containers

# === Docker Daemon Performance Tuning ===
# Add these to /etc/docker/daemon.json

{
  "log-driver": "json-file",
  "log-opts": {
    "max-size": "10m",
    "max-file": "3",
    "compress": "true"
  },
  "storage-driver": "overlay2",
  "storage-opts": [
    "overlay2.size=50G"
  ],
  "default-runtime": "runc",
  "runtimes": {
    "runc": {
      "path": "runc"
    }
  },
  "max-concurrent-downloads": 10,
  "max-concurrent-uploads": 10,
  "dns": ["8.8.8.8", "8.8.4.4"],
  "insecure-registries": [],
  "live-restore": true,
  "userland-proxy": false,
  "no-new-privileges": true,
  "icc": false,
  "cgroup-parent": "/docker.slice",
  "default-shm-size": "64m"
}

# === System Kernel Tuning for Docker ===
# Add these to /etc/sysctl.d/99-docker.conf

# Network performance
net.core.somaxconn = 65535
net.ipv4.tcp_max_syn_backlog = 65535
net.ipv4.tcp_syncookies = 1
net.ipv4.tcp_tw_reuse = 1
net.ipv4.tcp_fin_timeout = 10
net.ipv4.tcp_keepalive_time = 600
net.ipv4.tcp_max_tw_buckets = 1440000
net.ipv4.ip_local_port_range = 1024 65535
net.ipv4.tcp_rfc1337 = 1
net.ipv4.tcp_slow_start_after_idle = 0
net.ipv4.tcp_congestion_control = bbr

# File system performance
vm.swappiness = 10
vm.dirty_ratio = 60
vm.dirty_background_ratio = 2
vm.vfs_cache_pressure = 50
vm.dirty_expire_centisecs = 500
vm.dirty_writeback_centisecs = 100

# Memory management
vm.overcommit_memory = 1
vm.overcommit_ratio = 50
vm.max_map_count = 262144

# === Docker Container Resource Limits ===
# These are applied via docker-compose or docker run

# CPU Limits
CPU_SHARES=512  # Default is 1024
CPU_PERIOD=100000
CPU_QUOTA=50000  # 50% of CPU

# Memory Limits
MEMORY_LIMIT=1g
MEMORY_RESERVATION=512m
MEMORY_SWAP=2g
KERNEL_MEMORY=256m

# PIDs Limit
PIDS_LIMIT=1000

# === Ulimits Configuration ===
# Process limits for security and stability
ulimit -n 65535  # File descriptors
ulimit -u 32768  # Processes
ulimit -v 8192000  # Virtual memory

# === Docker Compose Performance Profile ===
# Use this with docker-compose --profile performance

version: '3.8'
services:
  trading-api:
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s

  postgres:
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 1G

  redis:
    deploy:
      resources:
        limits:
          cpus: '0.8'
          memory: 768M
        reservations:
          cpus: '0.4'
          memory: 384M

# === PostgreSQL Performance Tuning ===
# Add to postgresql.conf for production

# Memory settings
shared_buffers = 256MB
effective_cache_size = 1GB
work_mem = 16MB
maintenance_work_mem = 64MB
checkpoint_completion_target = 0.9
wal_buffers = 16MB
default_statistics_target = 100

# Connection settings
max_connections = 100
shared_preload_libraries = 'pg_stat_statements'

# === Redis Performance Tuning ===
# Add to redis.conf

maxmemory 512mb
maxmemory-policy allkeys-lru
save ""  # Disable persistence for maximum performance
tcp-keepalive 300
tcp-backlog 65535
timeout 0

# === Nginx Performance Tuning ===
# Add to nginx.conf

worker_processes auto;
worker_connections 2048;
worker_rlimit_nofile 65535;
keepalive_timeout 65;
keepalive_requests 1000;
client_max_body_size 10M;
client_body_timeout 30s;
client_header_timeout 30s;
send_timeout 30s;

# Gzip compression
gzip on;
gzip_comp_level 6;
gzip_min_length 1024;
gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;

# === FastAPI/Uvicorn Performance Settings ===
# These are used in the Dockerfile CMD

uvicorn main:app \
    --host 0.0.0.0 \
    --port 8000 \
    --workers 1 \
    --max-requests 1000 \
    --max-requests-jitter 50 \
    --timeout-keep-alive 30 \
    --limit-concurrency 100 \
    --backlog 2048 \
    --loop uvloop \
    --http h11

# === Monitoring and Metrics ===
# Performance metrics to monitor

# Container metrics
- container_cpu_usage_seconds_total
- container_memory_usage_bytes
- container_network_receive_bytes_total
- container_network_transmit_bytes_total
- container_fs_reads_bytes_total
- container_fs_writes_bytes_total

# Application metrics
- http_request_duration_seconds
- http_requests_total
- http_requests_in_progress
- http_response_size_bytes

# Database metrics
- pg_stat_database_calls_total
- pg_stat_database_tup_fetched
- pg_stat_database_tup_inserted
- pg_stat_database_tup_updated
- pg_stat_database_tup_deleted

# Redis metrics
- redis_memory_used_bytes
- redis_connected_clients
- redis_keyspace_hits_total
- redis_keyspace_misses_total
- redis_commands_processed_total

# === Performance Testing Commands ===
# Use these to test performance

# Load testing with Apache Bench
ab -n 1000 -c 100 http://localhost:8000/health

# Load testing with wrk
wrk -t12 -c400 -d30s http://localhost:8000/health

# Container performance monitoring
docker stats --format "table {{.Container}}\t{{.CPUPerc}}\t{{.MemUsage}}\t{{.NetIO}}\t{{.BlockIO}}"

# Docker system information
docker system df
docker system info

# === Backup and Maintenance Scripts ===
# Regular maintenance commands

# Clean up unused Docker resources
docker system prune -f
docker volume prune -f
docker image prune -f

# Backup volumes
docker run --rm \
    -v source_volume:/source \
    -v $(pwd):/backup \
    alpine:latest \
    tar czf /backup/backup.tar.gz -C /source .

# Monitor disk usage
docker system df -v