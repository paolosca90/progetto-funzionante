[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "ai-trading-system"
version = "2.0.1"
description = "AI-powered trading system with OANDA integration"
authors = [{name = "Development Team", email = "dev@example.com"}]
requires-python = ">=3.13"
readme = "README.md"
license = {text = "MIT"}
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Financial and Insurance Industry",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Office/Business :: Financial :: Investment",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]
dependencies = [
    "fastapi>=0.100.0,<1.0.0",
    "uvicorn[standard]>=0.20.0,<1.0.0",
    "sqlalchemy>=2.0.0,<3.0.0",
    "psycopg2-binary>=2.9.0,<3.0.0",
    "python-dotenv>=1.0.0",
    "passlib>=1.7.0",
    "python-jose>=3.3.0,<4.0.0",
    "python-multipart>=0.0.20",
    "pydantic>=2.0.0,<3.0.0",
    "pydantic[email]>=2.0.0",
    "email-validator>=2.0.0",
    "httpx>=0.25.0,<0.30.0",
    "requests>=2.28.0,<3.0.0",
    "pandas>=1.5.0,<2.3.0",
    "numpy>=1.21.0,<2.0.0",
    "aiohttp>=3.8.0,<4.0.0",
    "google-generativeai>=0.3.0",
    "aiofiles>=0.8.0,<1.0.0",
    "aiosqlite>=0.18.0,<1.0.0",
    "scikit-learn>=1.3.0,<2.0.0",
    "beautifulsoup4>=4.11.0,<5.0.0",
    "lxml>=4.9.0,<5.0.0",
    "redis>=5.0.0,<6.0.0",
]

[project.optional-dependencies]
dev = [
    "black>=23.0.0",
    "flake8>=6.0.0",
    "isort>=5.12.0",
    "mypy>=1.0.0",
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "httpx>=0.24.0",
    "pre-commit>=3.0.0",
]
test = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "httpx>=0.24.0",
    "factory-boy>=3.2.0",
]

[project.urls]
Homepage = "https://github.com/your-org/ai-trading-system"
Documentation = "https://ai-trading-system.readthedocs.io"
Repository = "https://github.com/your-org/ai-trading-system.git"
Issues = "https://github.com/your-org/ai-trading-system/issues"

# Tool configurations
[tool.black]
line-length = 88
target-version = ['py313']
include = '\.pyi?$'
extend-exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | node_modules
)/
'''
# Black specific formatting rules
skip-string-normalization = false
skip-magic-trailing-comma = false

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["app", "database", "models", "schemas"]
known_third_party = [
    "fastapi", "sqlalchemy", "pydantic", "passlib", "jose",
    "pandas", "numpy", "httpx", "aiohttp", "redis", "sklearn"
]
force_sort_within_sections = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
include_trailing_comma = true
combine_as_imports = true
split_on_trailing_comma = true
sections = ["FUTURE", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]

[tool.flake8]
max-line-length = 88
extend-ignore = [
    "E203",  # whitespace before ':'
    "E501",  # line too long (handled by black)
    "W503",  # line break before binary operator (handled by black)
    "F401",  # imported but unused (will be handled selectively)
    "F811",  # redefinition of unused name
]
exclude = [
    ".git",
    "__pycache__",
    ".tox",
    ".eggs",
    "*.egg",
    "build",
    "dist",
    "node_modules",
    ".venv",
    "venv",
    "env",
    ".mypy_cache",
    ".pytest_cache",
]
per-file-ignores = [
    "__init__.py:F401",  # Allow unused imports in __init__.py files
    "tests/*:F401,F811",  # Allow unused imports in test files
    "conftest.py:F401,F811",  # Allow unused imports in conftest.py
]
max-complexity = 10
docstring-convention = "google"

[tool.mypy]
python_version = "3.13"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

# Type checking paths
[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false
disallow_incomplete_defs = false

# External libraries without type stubs
[[tool.mypy.overrides]]
module = [
    "passlib.*",
    "jose.*",
    "redis.*",
    "sklearn.*",
    "google.*",
    "beautifulsoup4.*",
    "aiofiles.*",
    "aiosqlite.*",
  ]
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-v",
    "--tb=short",
    "--strict-markers",
    "--strict-config",
    "--cov=.",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "asyncio: marks tests as async",
]
asyncio_mode = "auto"

[tool.coverage.run]
source = ["."]
omit = [
    "tests/*",
    "venv/*",
    ".venv/*",
    "*/venv/*",
    "*/.venv/*",
    "setup.py",
    "conftest.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]